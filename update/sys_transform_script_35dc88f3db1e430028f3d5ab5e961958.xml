<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="MW WOR and subtasks import">4fd5b86bdb1a430028f3d5ab5e9619f1</map>
        <order>200</order>
        <script><![CDATA[(function runTransformScript(source, map, log, target /*undefined onStart*/ ) {
	
	/*
 	******************************************************************************************
	El presente transform map script sirve para determinar si se deben de crear solicitudes de diseño, NMS, SCNI y documentación para una work order request. De acuerdo a lo definido con el equipo de Microondas se tienen los siguientes casos para el valor del campo/columna "CAMBIO" en el archivo Excel conocido como "Entregable":
	
	-cambio = "HW", en este caso se crea una tarea de diseño, una de NMS, una SCNI y otra de documentación
	
	-cambio = "SW", en este caso se crea una tarea de diseño y de documentación
	
	-cambio = "No change", en este caso se crea una tarea de cni y documentación si existe información en el campo del excel llamado "cambio en CNI"
  
    ******************************************************************************************
 	*/

	var target_change;
	var change;
	var target_change_on_cni;
	
	if(!target.sys_id.nil())
	{
		target_change = target.change;
		target_change_on_cni = target.change_cni;
		
		if(target_change == 'HW')
		{
			createDesingRequest(target);
			createColloApRequest(target);
			createNMSRequest(target);
			createSCNIRequest(target);
			createDocumentationRequest(target);
		}
		
		if(target_change == 'SW')
		{
			createDesingRequest(target);
			createColloApRequest(target);
			createDocumentationRequest(target);
			
		}
		
		if(target_change == 'No change')
		{
			createDesingRequest(target);
			createColloApRequest(target);
			
			if(!target_change_on_cni.nil())
			{
				createSCNIRequest(target);
			    createDocumentationRequest(target);
			}
		}
		
	}
	
	
	
})(source, map, log, target);


function createDesingRequest(work_order_request)
{
	var logged_user = gs.getProperty('x_attme_microwaves.WORRequestedFor');
	var dsg = new GlideRecord('x_attme_microwaves_design_request');
	dsg.point_a = work_order_request.point_a;
	dsg.point_b = work_order_request.point_b;
	dsg.state = 7;   //las tareas de diseño nacen "cerradas".
	dsg.assigned_to = logged_user;
	dsg.requested_for = work_order_request.requested_for;
	dsg.change = work_order_request.change;
	dsg.wor_comments = work_order_request.wor_comments;
	dsg.close_notes = 'tarea de diseño cerrada de manera automática';
	dsg.parent = work_order_request.sys_id;
	dsg.work_order_request = work_order_request.sys_id;
	dsg.insert();
	
}

function createColloApRequest(work_order_request)
{
	var logged_user = gs.getProperty('x_attme_microwaves.WORRequestedFor');
	var collo = new GlideRecord('x_attme_microwaves_collo_ap_request');
	collo.point_a = work_order_request.point_a;
	collo.point_b = work_order_request.point_b;
	collo.state = 7;   //las tareas de collo ap nacen "cerradas".
	collo.requested_for = work_order_request.requested_for;
	collo.close_notes = 'tarea de collo ap cerrada de manera automática';
	collo.parent = work_order_request.sys_id;
	collo.work_order_request = work_order_request.sys_id;
	collo.insert();
	
}

function createNMSRequest(work_order_request)
{
	var nms = new GlideRecord('x_attme_microwaves_nms_requests');
	nms.point_a = work_order_request.point_a;
	nms.point_b = work_order_request.point_b;
	nms.requested_for = work_order_request.requested_for;
	nms.project = work_order_request.project;
	nms.port_requested = work_order_request.port_requested;
	nms.aggregator_site_id = work_order_request.aggregator;
	nms.aggregator = searchAggregator(work_order_request.aggregator); //con una función
	
	//si se requiere puerto se busca la solicitud de puerto en datacom
	if(nms.port_requested == true)
	{
	    nms.port_datacom_request = searchDCR(nms.aggregator, nms.requested_for); //con una función
	}
	
	nms.technology = work_order_request.technology;
	nms.radio_model = work_order_request.radio_model;
	nms.protection = work_order_request.protection;
	nms.configuration = work_order_request.configuration;
	nms.input_document_url = work_order_request.input_document_url; //url del archivo LLD
	nms.input_document_url_2 = work_order_request.input_document_url_3; //url del archivo entregable
	nms.observations = work_order_request.wor_comments;
	nms.parent = work_order_request.sys_id;
	nms.work_order_request = work_order_request.sys_id;
	nms.insert();
}

function createSCNIRequest(work_order_request)
{
	var cni = new GlideRecord('x_attme_microwaves_scni_request');
	cni.point_a = work_order_request.point_a;
	cni.point_b = work_order_request.point_b;
	cni.input_document_url = work_order_request.input_document_url_2; // url del archivo Mlink
	cni.requested_for = work_order_request.requested_for;
	cni.parent = work_order_request.sys_id;
	cni.work_order_request = work_order_request.sys_id;
	cni.insert();
}

function createDocumentationRequest(work_order_request)
{
	var doc = new GlideRecord('x_attme_microwaves_documentation_request');
	doc.point_a = work_order_request.point_a;
	doc.point_b = work_order_request.point_b;
	doc.requested_for = work_order_request.requested_for;
	doc.parent = work_order_request.sys_id;
	doc.work_order_request = work_order_request.sys_id;
	doc.insert();
}


//a continuación se presenta las funciones auxiliares de la función createNMSRequest()

function searchAggregator(work_order_request_aggregator)
{
	//Se busca el aggregador en el "catalogo" de agregadores, estas son localidades con el campo "datacom location" como true.
	
	var aggregator = new GlideRecord('cmn_location');
	aggregator.addQuery('u_datacom_location', true);
	aggregator.addQuery('u_site_id', work_order_request_aggregator);
	aggregator.query();
	
	if(aggregator.next())
	{
		return aggregator.sys_id; //devuelve el sys_id del agregador encontrado
	}
	
	
}


function searchDCR(nms_aggregator, nms_requested_for)
{
	var datacom_port_assignment = new GlideRecord('x_attme_datacom_port_assignment');
	datacom_port_assignment.addQuery('location', nms_aggregator);
	datacom_port_assignment.orderByDesc('sys_created_on'); //evaluamos de la más reciente 
	datacom_port_assignment.query();
		
		//buscamos el sys_id del departamento del usuario
		var user = new GlideRecord('sys_user');
		user.get(nms_requested_for);
		var microwaves_department = user.department;		
		
		//posiblemente encontremos varios "port assignment" para el mismo agregador, se evaluan todas
		while(datacom_port_assignment.next())
		{
			//evalumamos la solicitud de datacom relacionada con el port assignment
			var datacom_request = new GlideRecord('x_attme_datacom_datacom_request');
			datacom_request.addQuery('sys_id', datacom_port_assignment.datacom_request);
			datacom_request.query();
			
			if(datacom_request.next())
			{
				//si la solicitud de datacom se encuentra activa
				if(datacom_request.active == true)
				{
					//si la solicitud además es de un usuario del departamento de microondas
					if(datacom_request.opened_by.department == microwaves_department)
					{
						//retornamos el sys_id de la datacom request encontrada
						return datacom_request.sys_id;
					}
				}
			}
			
			
			
        }

}
]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>hugo.ruano</sys_created_by>
        <sys_created_on>2017-11-14 15:08:40</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>35dc88f3db1e430028f3d5ab5e961958</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>onAfter</sys_name>
        <sys_package display_value="Microwaves" source="x_attme_microwaves">85466334db7ff20028f3d5ab5e9619a2</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Microwaves">85466334db7ff20028f3d5ab5e9619a2</sys_scope>
        <sys_update_name>sys_transform_script_35dc88f3db1e430028f3d5ab5e961958</sys_update_name>
        <sys_updated_by>hugo.ruano</sys_updated_by>
        <sys_updated_on>2017-11-14 17:44:09</sys_updated_on>
        <when>onAfter</when>
    </sys_transform_script>
</record_update>
